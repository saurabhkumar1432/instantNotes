name: Release APK

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.github/**'
      - '!.github/workflows/release-apk.yml'

permissions:
  contents: write

jobs:
  build-release:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper/
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Get version info
        id: version
        run: |
          # Extract version from build.gradle.kts
          VERSION_CODE=$(grep -oP 'versionCode\s*=\s*\K\d+' app/build.gradle.kts || echo "1")
          VERSION_NAME=$(grep -oP 'versionName\s*=\s*"\K[^"]+' app/build.gradle.kts || echo "1.0")
          
          echo "Extracted VERSION_CODE: $VERSION_CODE"
          echo "Extracted VERSION_NAME: $VERSION_NAME"
          
          # Get commit info
          COMMIT_COUNT=$(git rev-list --count HEAD)
          SHORT_SHA=$(git rev-parse --short HEAD)
          
          # Create release tag
          RELEASE_TAG="v${VERSION_NAME}-${COMMIT_COUNT}-${SHORT_SHA}"
          
          echo "version_code=${VERSION_CODE}" >> $GITHUB_OUTPUT
          echo "version_name=${VERSION_NAME}" >> $GITHUB_OUTPUT
          echo "release_tag=${RELEASE_TAG}" >> $GITHUB_OUTPUT
          echo "commit_count=${COMMIT_COUNT}" >> $GITHUB_OUTPUT
          echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT

      - name: Build release APK
        run: ./gradlew :app:assembleRelease --no-daemon --stacktrace
        env:
          CI: true

      - name: Sign APK
        id: sign_apk
        run: |
          # For now, we'll use the unsigned APK
          # In production, you would sign it here using a keystore
          APK_PATH=$(find app/build/outputs/apk/release -name "*-release-unsigned.apk" -o -name "*-release.apk" | head -1)
          
          if [ -z "$APK_PATH" ]; then
            echo "Error: No release APK found"
            exit 1
          fi
          
          APK_NAME="VoiceNotesAI-${{ steps.version.outputs.release_tag }}.apk"
          
          # Rename APK with version info
          cp "$APK_PATH" "app/build/outputs/apk/release/${APK_NAME}"
          
          echo "apk_path=app/build/outputs/apk/release/${APK_NAME}" >> $GITHUB_OUTPUT
          echo "apk_name=${APK_NAME}" >> $GITHUB_OUTPUT

      - name: Create release notes
        id: release_notes
        run: |
          cat > release_notes.md << EOF
          # Voice Notes AI - Release ${{ steps.version.outputs.release_tag }}
          
          ## What's Changed
          - Auto-generated release from commit ${{ steps.version.outputs.short_sha }}
          - Build number: ${{ steps.version.outputs.commit_count }}
          
          ## Version Info
          - **Version Name:** ${{ steps.version.outputs.version_name }}
          - **Version Code:** ${{ steps.version.outputs.version_code }}
          - **Build Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ## Download
          Download the APK file below and install it on your Android device.
          
          **Note:** This is an unsigned/debug APK. For production use, configure proper signing in the workflow.
          
          ## Recent Commits
          $(git log --oneline -5)
          EOF
          
          echo "notes_file=release_notes.md" >> $GITHUB_OUTPUT

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.sign_apk.outputs.apk_name }}
          path: ${{ steps.sign_apk.outputs.apk_path }}
          retention-days: 90

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.release_tag }}
          name: Release ${{ steps.version.outputs.release_tag }}
          body_path: release_notes.md
          files: ${{ steps.sign_apk.outputs.apk_path }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up
        if: always()
        run: |
          rm -f release_notes.md
